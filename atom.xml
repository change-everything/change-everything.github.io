<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>手draw饼</title>
  <icon>https://www.gravatar.com/avatar/3e4855e7647fbf1b80a5a2e4a1a17a3a</icon>
  <subtitle>记录学习笔记</subtitle>
  <link href="https://www.pypblog.top/atom.xml" rel="self"/>
  
  <link href="https://www.pypblog.top/"/>
  <updated>2022-02-28T14:39:51.178Z</updated>
  <id>https://www.pypblog.top/</id>
  
  <author>
    <name>裴永鹏</name>
    <email>1158336066@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式-适配器模式</title>
    <link href="https://www.pypblog.top/2022/02/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.pypblog.top/2022/02/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-28T14:36:18.000Z</published>
    <updated>2022-02-28T14:39:51.178Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="Java设计模式—-适配器模式"><a href="#Java设计模式—-适配器模式" class="headerlink" title="Java设计模式—-适配器模式"></a>Java设计模式—-适配器模式</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;Java设计模式—-适配器模式&quot;&gt;&lt;a href=&quot;#Java设计模式—-适配器模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—-适配器模式&quot;&gt;&lt;/a&gt;Java设计模式—-适配器模式&lt;</summary>
      
    
    
    
    <category term="Java设计模式" scheme="https://www.pypblog.top/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="https://www.pypblog.top/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.pypblog.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式-单例模式</title>
    <link href="https://www.pypblog.top/2022/02/28/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.pypblog.top/2022/02/28/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-28T14:03:34.000Z</published>
    <updated>2022-02-28T14:34:16.758Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="Java设计模式—-单例模式"><a href="#Java设计模式—-单例模式" class="headerlink" title="Java设计模式—-单例模式"></a>Java设计模式—-单例模式</h4><p>程序在运行的时候，通常会创建很多实例，但是我们有时候只需要一个实例就可以。那么我么可以用单例模式来解决这个问题。</p><p>单例模式也分为饿汉式和懒汉式；</p><p>下面是饿汉式的例子；</p><h5 id="1-1-定义一个Singleton类，它的构造函数是private的，也就是说不能在Singleton类外部创建实例。"><a href="#1-1-定义一个Singleton类，它的构造函数是private的，也就是说不能在Singleton类外部创建实例。" class="headerlink" title="1.1 定义一个Singleton类，它的构造函数是private的，也就是说不能在Singleton类外部创建实例。"></a>1.1 定义一个Singleton类，它的构造函数是<strong>private</strong>的，也就是说不能在Singleton类外部创建实例。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月18日 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成了一个实例...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便测试，在构造函数里打印语句，每调用一次就输出提示语句；</p><p>**getInstance()**方法是唯一获取Singleton实例的方式，一般情况下都会这样命名;</p><p>但是这样有个坏处，可能代码量少的情况下，不感觉有什么，但是当一个庞大的项目这样去用单例模式的话，有没有想过如果你的项目压根当时用不到这个实例，因为singleton的属性是静态的，所以类加载的时候就会进行初始化，会造成一定的资源浪费。</p><h5 id="1-2-测试代码"><a href="#1-2-测试代码" class="headerlink" title="1.2 测试代码"></a>1.2 测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月18日 21:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start.&quot;</span>);</span><br><span class="line">        Singleton obj1 = Singleton.getInstance();</span><br><span class="line">        Singleton obj2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj1 == obj2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;obj1和obj2是相同的实例&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;obj1和obj2是不同的实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了测试，我调用了两次<strong>getInstance()<strong>方法，将返回值保存在</strong>obj1</strong>和<strong>obj2</strong>中用于比较两者地址是否一致，从而判断是否是同一个实例；</p><h5 id="1-3-运行结果"><a href="#1-3-运行结果" class="headerlink" title="1.3 运行结果"></a>1.3 运行结果</h5><p>![](JAVA设计模式-单例模式/屏幕截图 2022-02-28 222303.jpg)</p><h5 id="1-4-来看看懒汉式"><a href="#1-4-来看看懒汉式" class="headerlink" title="1.4 来看看懒汉式"></a>1.4 来看看懒汉式</h5><p>我在饿汉式原有的基础上进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月18日 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成了一个实例...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton - <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是在类加载的时候把singleton指向null，当需要的时候再去调用从而生成实例。</p><p>但是这样还是不够完美，如果有很多线程并行调用生成实例，那是不是就歇菜了？所以他是线程不安全的，在java中有解决线程安全的关键字，只需加上即可（synchronized）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月18日 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成了一个实例...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton - <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;Java设计模式—-单例模式&quot;&gt;&lt;a href=&quot;#Java设计模式—-单例模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—-单例模式&quot;&gt;&lt;/a&gt;Java设计模式—-单例模式&lt;/h4&gt;</summary>
      
    
    
    
    <category term="Java设计模式" scheme="https://www.pypblog.top/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="https://www.pypblog.top/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.pypblog.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式-模板模式</title>
    <link href="https://www.pypblog.top/2022/02/17/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.pypblog.top/2022/02/17/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-17T14:03:26.000Z</published>
    <updated>2022-02-17T14:43:01.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java设计模式—-模板模式"><a href="#Java设计模式—-模板模式" class="headerlink" title="Java设计模式—-模板模式"></a>Java设计模式—-模板模式</h4><span id="more"></span><p>这种设计模式在父类中编写了算法，就无需再在各个子类中编写同样的算法，如果程序出现BUG就会很快锁定</p><h5 id="1-1-首先创建抽象父类AbstractDisplay"><a href="#1-1-首先创建抽象父类AbstractDisplay" class="headerlink" title="1.1 首先创建抽象父类AbstractDisplay"></a>1.1 首先创建抽象父类AbstractDisplay</h5><p>父类中定义了三个方法，用于输出字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月16日 22:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        open();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            print();</span><br><span class="line">        &#125;</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建子类CharDisplay"><a href="#1-2-创建子类CharDisplay" class="headerlink" title="1.2 创建子类CharDisplay"></a>1.2 创建子类CharDisplay</h5><p>使子类继承AbstractDisplay类，重写父类的三个抽象方法</p><p>重写的方法将以特定的格式输出字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月16日 22:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> aChar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharDisplay</span><span class="params">(<span class="keyword">char</span> aChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aChar = aChar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(aChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-创建子类StringDisplay"><a href="#1-3-创建子类StringDisplay" class="headerlink" title="1.3 创建子类StringDisplay"></a>1.3 创建子类StringDisplay</h5><p>同样的继承AbstractDisplay，并重写抽象方法</p><p><strong>width</strong>属性用于记录字符串长度，再同样以特定形式输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月16日 22:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringDisplay</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">        <span class="keyword">this</span>.width = string.getBytes().length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span> + string + <span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-测试代码"><a href="#1-4-测试代码" class="headerlink" title="1.4 测试代码"></a>1.4 测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月16日 22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractDisplay display = <span class="keyword">new</span> CharDisplay(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        display.display();</span><br><span class="line"></span><br><span class="line">        AbstractDisplay display1 = <span class="keyword">new</span> StringDisplay(<span class="string">&quot;Hello World.&quot;</span>);</span><br><span class="line">        display1.display();</span><br><span class="line"></span><br><span class="line">        AbstractDisplay display2 = <span class="keyword">new</span> StringDisplay(<span class="string">&quot;你好，世界。&quot;</span>);</span><br><span class="line">        display2.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-运行结果"><a href="#1-5-运行结果" class="headerlink" title="1.5 运行结果"></a>1.5 运行结果</h5><p><img src="/2022/02/17/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F.jpg"></p><h5 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h5><p>在模板模式中，父类与子类的相互协作撑起了整个程序，虽然将更多方法的实现放在父类会让子类变得轻松，但是也降低了子类的灵活性；反之，如果父类实现的方法过少，子类就会变得臃肿，而且还会导致各子类代码的重复。</p><p>所以开发人员在这其中扮演一个非常重要的角色，即协调父类与子类，划分处理级别。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Java设计模式—-模板模式&quot;&gt;&lt;a href=&quot;#Java设计模式—-模板模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—-模板模式&quot;&gt;&lt;/a&gt;Java设计模式—-模板模式&lt;/h4&gt;</summary>
    
    
    
    <category term="Java设计模式" scheme="https://www.pypblog.top/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="https://www.pypblog.top/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.pypblog.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式--迭代器模式</title>
    <link href="https://www.pypblog.top/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.pypblog.top/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-15T03:18:23.000Z</published>
    <updated>2022-02-17T14:42:18.444Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java设计模式—-迭代器模式"><a href="#Java设计模式—-迭代器模式" class="headerlink" title="Java设计模式—-迭代器模式"></a>Java设计模式—-迭代器模式</h4><span id="more"></span><p>为什么要使用这种设计模式呢？这种设计模式可以提高程序的可复用性，相比for循环更加的灵活，不管集合类怎么改变，只要集合的iterator方法能正确地返回Iterator实例，即使不对while循环做任何修改，也可以正常使用。</p><p>这里有一个小建议：<strong>不要只使用具体的类来编程，要优先使用抽象类和接口来编程</strong>。</p><p>下面上代码，为了方便理解，使用书与书架的关系编写代码</p><h5 id="1-1-创建集合接口"><a href="#1-1-创建集合接口" class="headerlink" title="1.1 创建集合接口"></a>1.1 创建集合接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义返回类型为Iterator的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建迭代器接口"><a href="#1-2-创建迭代器接口" class="headerlink" title="1.2 创建迭代器接口"></a>1.2 创建迭代器接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器接口，定义了抽象方法hasNext(),next()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断集合中是否还有下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/14 23:53</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 如果有返回true，如果没有返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于返回集合中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/14 23:54</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-定义Book类，提供构造器和get方法"><a href="#1-3-定义Book类，提供构造器和get方法" class="headerlink" title="1.3 定义Book类，提供构造器和get方法"></a>1.3 定义Book类，提供构造器和get方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-BookShelf-类主要存放书本信息，扮演集合的角色"><a href="#1-4-BookShelf-类主要存放书本信息，扮演集合的角色" class="headerlink" title="1.4 BookShelf 类主要存放书本信息，扮演集合的角色"></a>1.4 BookShelf 类主要存放书本信息，扮演集合的角色</h5><p><strong>常规数组写法放在注释里</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义ArrayList类型的集合存放书籍</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器用于初始化一个ArrayList数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:03</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标来获取书本信息</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，则返回 return books[index]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:04</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> edu.pyp.iterator.Book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加书籍</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，</span></span><br><span class="line"><span class="comment">     * 则在外部定义一个 int 类型的last变量来记录集合的最后一个元素的下标</span></span><br><span class="line"><span class="comment">     * 再将书籍添加到这个位置，最后 last++</span></span><br><span class="line"><span class="comment">     * 写法：this.books[last] = book;</span></span><br><span class="line"><span class="comment">     *      last++;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books.add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合长度</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，则返回 last</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写了接口的方法 返回了一个 BookShelfIterator的实例，</span></span><br><span class="line"><span class="comment">     * 并把集合传入BookShelfIterator的构造器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> edu.pyp.iterator.Iterator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-创建BookShelfIterator类，实现Iterator接口"><a href="#1-5-创建BookShelfIterator类，实现Iterator接口" class="headerlink" title="1.5 创建BookShelfIterator类，实现Iterator接口"></a>1.5 创建BookShelfIterator类，实现Iterator接口</h5><p>这就是一个自定义的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扮演迭代器的角色</span></span><br><span class="line"><span class="comment"> * 类中定义两个属性为BookShelf类型的对象和记录下标的index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器用于初始化，接收BookShelf传来的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:15</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookShelf 传入bookShelf对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，判断如果index&lt;集合的长度，就说明还有下一条数据</span></span><br><span class="line"><span class="comment">     * 否则就没有下一条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:15</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; bookShelf.getLength()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，用于接收书本信息</span></span><br><span class="line"><span class="comment">     * 内部index自增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:17</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-6-测试代码"><a href="#1-6-测试代码" class="headerlink" title="1.6 测试代码"></a>1.6 测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookShelf = <span class="keyword">new</span> BookShelf();</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Around the world in 80 days&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Bible&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Cinderella&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        Iterator iterator = bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Book next = (Book) iterator.next();</span><br><span class="line">            System.out.println(next.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-运行结果"><a href="#1-7-运行结果" class="headerlink" title="1.7 运行结果"></a>1.7 运行结果</h5><p><img src="/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg"></p><p>在测试代码中我们可以看出，不用普通数组的原因是普通数组的数据不能重复，从而可扩展性不强。如果是多线程则建议使用Vector或其他线程安全的集合类。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Java设计模式—-迭代器模式&quot;&gt;&lt;a href=&quot;#Java设计模式—-迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—-迭代器模式&quot;&gt;&lt;/a&gt;Java设计模式—-迭代器模式&lt;/h4&gt;</summary>
    
    
    
    <category term="Java设计模式" scheme="https://www.pypblog.top/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="https://www.pypblog.top/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.pypblog.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
