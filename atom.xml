<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>手draw饼</title>
  <icon>https://www.gravatar.com/avatar/3e4855e7647fbf1b80a5a2e4a1a17a3a</icon>
  <subtitle>记录学习笔记</subtitle>
  <link href="https://119.3.63.102/atom.xml" rel="self"/>
  
  <link href="https://119.3.63.102/"/>
  <updated>2022-02-15T03:42:22.834Z</updated>
  <id>https://119.3.63.102/</id>
  
  <author>
    <name>裴永鹏</name>
    <email>1158336066@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA设计模式--迭代器模式</title>
    <link href="https://119.3.63.102/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://119.3.63.102/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-15T03:18:23.000Z</published>
    <updated>2022-02-15T03:42:22.834Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java设计模式—-迭代器模式"><a href="#Java设计模式—-迭代器模式" class="headerlink" title="Java设计模式—-迭代器模式"></a>Java设计模式—-迭代器模式</h4><span id="more"></span><p>为什么要使用这种设计模式呢？这种设计模式可以提高程序的可复用性，相比for循环更加的灵活，不管集合类怎么改变，只要集合的iterator方法能正确地返回Iterator实例，即使不对while循环做任何修改，也可以正常使用。</p><p>这里有一个小建议：<strong>不要只使用具体的类来编程，要优先使用抽象类和接口来编程</strong>。</p><p>下面上代码，为了方便理解，使用书与书架的关系编写代码</p><h5 id="1-1-创建集合接口"><a href="#1-1-创建集合接口" class="headerlink" title="1.1 创建集合接口"></a>1.1 创建集合接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义返回类型为Iterator的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建迭代器接口"><a href="#1-2-创建迭代器接口" class="headerlink" title="1.2 创建迭代器接口"></a>1.2 创建迭代器接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器接口，定义了抽象方法hasNext(),next()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于判断集合中是否还有下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/14 23:53</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 如果有返回true，如果没有返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于返回集合中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/14 23:54</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-定义Book类，提供构造器和get方法"><a href="#1-3-定义Book类，提供构造器和get方法" class="headerlink" title="1.3 定义Book类，提供构造器和get方法"></a>1.3 定义Book类，提供构造器和get方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-BookShelf-类主要存放书本信息，扮演集合的角色"><a href="#1-4-BookShelf-类主要存放书本信息，扮演集合的角色" class="headerlink" title="1.4 BookShelf 类主要存放书本信息，扮演集合的角色"></a>1.4 BookShelf 类主要存放书本信息，扮演集合的角色</h5><p><strong>常规数组写法放在注释里</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义ArrayList类型的集合存放书籍</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器用于初始化一个ArrayList数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:03</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标来获取书本信息</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，则返回 return books[index]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:04</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> edu.pyp.iterator.Book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加书籍</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，</span></span><br><span class="line"><span class="comment">     * 则在外部定义一个 int 类型的last变量来记录集合的最后一个元素的下标</span></span><br><span class="line"><span class="comment">     * 再将书籍添加到这个位置，最后 last++</span></span><br><span class="line"><span class="comment">     * 写法：this.books[last] = book;</span></span><br><span class="line"><span class="comment">     *      last++;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books.add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合长度</span></span><br><span class="line"><span class="comment">     * 如果使用常规的数组写法，则返回 last</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写了接口的方法 返回了一个 BookShelfIterator的实例，</span></span><br><span class="line"><span class="comment">     * 并把集合传入BookShelfIterator的构造器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> edu.pyp.iterator.Iterator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-创建BookShelfIterator类，实现Iterator接口"><a href="#1-5-创建BookShelfIterator类，实现Iterator接口" class="headerlink" title="1.5 创建BookShelfIterator类，实现Iterator接口"></a>1.5 创建BookShelfIterator类，实现Iterator接口</h5><p>这就是一个自定义的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扮演迭代器的角色</span></span><br><span class="line"><span class="comment"> * 类中定义两个属性为BookShelf类型的对象和记录下标的index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年01月14日 23:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器用于初始化，接收BookShelf传来的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:15</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookShelf 传入bookShelf对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，判断如果index&lt;集合的长度，就说明还有下一条数据</span></span><br><span class="line"><span class="comment">     * 否则就没有下一条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:15</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; bookShelf.getLength()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，用于接收书本信息</span></span><br><span class="line"><span class="comment">     * 内部index自增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> PeiYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/15 0:17</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-6-测试代码"><a href="#1-6-测试代码" class="headerlink" title="1.6 测试代码"></a>1.6 测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookShelf = <span class="keyword">new</span> BookShelf();</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Around the world in 80 days&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Bible&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Cinderella&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Daddy-Long-Legs&quot;</span>));</span><br><span class="line">        Iterator iterator = bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Book next = (Book) iterator.next();</span><br><span class="line">            System.out.println(next.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试代码中我们可以看出，不用普通数组的原因是普通数组的数据不能重复，从而可扩展性不强。如果是多线程则建议使用Vector或其他线程安全的集合类。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Java设计模式—-迭代器模式&quot;&gt;&lt;a href=&quot;#Java设计模式—-迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式—-迭代器模式&quot;&gt;&lt;/a&gt;Java设计模式—-迭代器模式&lt;/h4&gt;</summary>
    
    
    
    <category term="JAVA" scheme="https://119.3.63.102/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://119.3.63.102/tags/JAVA/"/>
    
    <category term="设计模式" scheme="https://119.3.63.102/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式--装饰者模式</title>
    <link href="https://119.3.63.102/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://119.3.63.102/2022/02/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-15T02:45:46.000Z</published>
    <updated>2022-02-15T02:47:41.978Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="Java-设计模式—-装饰者模式"><a href="#Java-设计模式—-装饰者模式" class="headerlink" title="Java 设计模式—-装饰者模式"></a>Java 设计模式—-装饰者模式</h4><p>测hi是</p><p>的哇哈健康的</p><p>的哇好酷的卡上好的</p><p>扩大很快就会双大括号卡仕达看见啥空间</p><p>对面八十八的撒旦艰苦哈</p><p>的卡号开始计划的卡上</p><p>爱德华授课计划打开沙河口</p><p>良好的开局撒谎进口的贺卡收到快件哈克</p><p>大厦的卡号是会计</p><p>大家还是看记得哈空间上的卡号是的哈哈了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;Java-设计模式—-装饰者模式&quot;&gt;&lt;a href=&quot;#Java-设计模式—-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;Java 设计模式—-装饰者模式&quot;&gt;&lt;/a&gt;Java 设计模式—-装饰</summary>
      
    
    
    
    <category term="JAVA" scheme="https://119.3.63.102/categories/JAVA/"/>
    
    <category term="设计模式" scheme="https://119.3.63.102/categories/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JAVA" scheme="https://119.3.63.102/tags/JAVA/"/>
    
    <category term="设计模式" scheme="https://119.3.63.102/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式--工厂模式</title>
    <link href="https://119.3.63.102/2022/02/14/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://119.3.63.102/2022/02/14/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-14T13:40:40.000Z</published>
    <updated>2022-02-14T13:43:43.868Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="java设计模式—-工厂模式"><a href="#java设计模式—-工厂模式" class="headerlink" title="java设计模式—-工厂模式"></a>java设计模式—-工厂模式</h3><p>这是一个非常有趣的哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> test</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;java设计模式—-工厂模式&quot;&gt;&lt;a href=&quot;#java设计模式—-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;java设计模式—-工厂模式&quot;&gt;&lt;/a&gt;java设计模式—-工厂模式&lt;/h3&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://119.3.63.102/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="JAVA" scheme="https://119.3.63.102/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://119.3.63.102/tags/JAVA/"/>
    
    <category term="设计模式" scheme="https://119.3.63.102/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
